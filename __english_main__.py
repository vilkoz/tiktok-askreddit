import asyncio, tts, os, video, requests

# from scraper import scrape
from upload import upload_to_tiktok
from utils import config

posts = [
    # {
    #     "title": "–ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Å–ª–æ–≤–∞ —Ä—ñ–≤–Ω—è –ê1 —á. 1",
    #     "parts": [
    #         {"q-en": "Together", "a-uk": "–†–∞–∑–æ–º"},
    #         {"q-en": "apartment", "a-uk": "–ö–≤–∞—Ä—Ç–∏—Ä–∞"},
    #         {"q-en": "west", "a-uk": "–ó–∞—Ö—ñ–¥"},
    #     ],
    # },
    # {
    #     "title": "–ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Å–ª–æ–≤–∞ —Ä—ñ–≤–Ω—è –ê1 —á. 2",
    #     "parts": [
    #         {"q-en": "To laugh", "a-uk": "–°–º—ñ—è—Ç–∏—Å—å"},
    #         {"q-en": "rock", "a-uk": "–°–∫–µ–ª—è"},
    #         {"q-en": "Also", "a-uk": "–¢–∞–∫–æ–∂"},
    #     ],
    # },
    # {
    #     "title": "–ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Å–ª–æ–≤–∞ —Ä—ñ–≤–Ω—è –ê1 —á. 3",
    #     "parts": [
    #         {"q-en": "motel", "a-uk": "–ú–æ—Ç–µ–ª—å"},
    #         {"q-en": "ocean", "a-uk": "–û–∫–µ–∞–Ω"},
    #         {"q-en": "To communicate", "a-uk": "–°–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å"},
    #     ],
    # },
    # {
    #     "title": "–ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Å–ª–æ–≤–∞ —Ä—ñ–≤–Ω—è –ê1 —á. 4",
    #     "parts": [
    #         {"q-en": "To drink", "a-uk": "–ü–∏—Ç–∏"},
    #         {"q-en": "Responsible", "a-uk": "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏–π, –Ω–∞–¥—ñ–π–Ω–∏–π"},
    #         {"q-en": "sweetheart", "a-uk": "–ü–∞—Ä—Ç–Ω–µ—Ä, –∫–æ—Ö–∞–Ω–∏–π"},
    #     ],
    # },
    # {
    #     "title": "–ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Å–ª–æ–≤–∞ —Ä—ñ–≤–Ω—è –ê1 —á. 5",
    #     "parts": [
    #         {"q-en": "Eventually", "a-uk": "–í –∫—ñ–Ω—Ü—ñ –∫—ñ–Ω—Ü—ñ–≤"},
    #         {"q-en": "Big", "a-uk": "–í–µ–ª–∏–∫–∏–π"},
    #         {"q-en": "To help", "a-uk": "–î–æ–ø–æ–º–æ–≥–∞—Ç–∏"},
    #     ],
    # },
    # {
    #     "title": "–ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Å–ª–æ–≤–∞ —Ä—ñ–≤–Ω—è –ê1 —á. 6",
    #     "parts": [
    #         {"q-en": "Available", "a-uk": "–î–æ—Å—Ç—É–ø–Ω–∏–π"},
    #         {"q-en": "To play", "a-uk": "–ì—Ä–∞—Ç–∏"},
    #         {"q-en": "food order", "a-uk": "–ó–∞–º–æ–≤–ª–µ–Ω—è —ó–∂—ñ"},
    #     ],
    # },
    # {
    #     "title": "–ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Å–ª–æ–≤–∞ —Ä—ñ–≤–Ω—è –ê1 —á. 7",
    #     "parts": [
    #         {"q-en": "dialogue", "a-uk": "–î—ñ–∞–ª–æ–≥"},
    #         {"q-en": "To sell", "a-uk": "–ü—Ä–æ–¥–∞–≤–∞—Ç–∏"},
    #         {"q-en": "Honestly", "a-uk": "–ß–µ—Å–Ω–æ"},
    #         {"q-en": "To continue", "a-uk": "–ü—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏"},
    #     ],
    # },
    # {'title': '–ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Å–ª–æ–≤–∞ —Ä—ñ–≤–Ω—è B1 —á. 1', 'parts': [{'q-en': 'To commit', 'a-uk': '–ó–¥—ñ–π—Å–Ω–∏—Ç–∏, –∑–∞—Ñ—ñ–∫—Å—É–≤–∞—Ç–∏, –¥–æ—Ä—É—á–∏—Ç–∏'}, {'q-en': 'verification', 'a-uk': '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞'}, {'q-en': 'Updated', 'a-uk': '–û–Ω–æ–≤–ª–µ–Ω–∏–π'}]},
    # {'title': '–ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Å–ª–æ–≤–∞ —Ä—ñ–≤–Ω—è B1 —á. 2', 'parts': [{'q-en': '–ê youth', 'a-uk': '–ú–æ–ª–æ–¥—å, —é–Ω–∞–∫, –º–æ–ª–æ–¥—ñ—Å—Ç—å'}, {'q-en': 'To consulate', 'a-uk': '–ö–æ–Ω—Å—É–ª—å—Ç—É–≤–∞—Ç–∏'}, {'q-en': 'Careful', 'a-uk': '–û–±–µ—Ä–µ–∂–Ω–∏–π'}]},
    # {'title': '–ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Å–ª–æ–≤–∞ —Ä—ñ–≤–Ω—è B1 —á. 3', 'parts': [{'q-en': 'Fashionable', 'a-uk': '–ú–æ–¥–Ω–∏–π'}, {'q-en': 'Tedious', 'a-uk': '–í—Ç–æ–º–ª–∏–≤–∏–π, –∫–æ–ø—ñ—Ç–∫–∏–π, –Ω–∞–±—Ä–∏–¥–ª–∏–≤–∏–π'}, {'q-en': 'immunization', 'a-uk': '–Ü–º—É–Ω—ñ–∑–∞—Ü—ñ—è'}]},
    # {'title': '–ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Å–ª–æ–≤–∞ —Ä—ñ–≤–Ω—è B1 —á. 4', 'parts': [{'q-en': 'contest', 'a-uk': '–ó–º–∞–≥–∞–Ω–Ω—è, –±–æ—Ä–æ—Ç—å–±–∞, –∫–æ–Ω–∫—É—Ä—Å'}, {'q-en': 'Predominantly', 'a-uk': '–ü–æ—Å—Ç—ñ–π–Ω–æ'}, {'q-en': 'improvement', 'a-uk': '–ü–æ–ª—ñ–ø—à–µ–Ω–Ω—è'}]},
    # {'title': '–ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Å–ª–æ–≤–∞ —Ä—ñ–≤–Ω—è B1 —á. 5', 'parts': [{'q-en': '–ê godliness', 'a-uk': '–ë–ª–∞–≥–æ—á–µ—Å—Ç—è, –±–∞–¥—å–æ—Ä—ñ—Å—Ç—å'}, {'q-en': '–ê challenge', 'a-uk': '–í–∏–∫–ª–∏–∫, —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å'}, {'q-en': 'Unmatched', 'a-uk': '–ù–µ–ø–æ–≤—Ç–æ—Ä–Ω–∏–π, –Ω–µ–ø–µ—Ä–µ–≤–µ—Ä—à–µ–Ω–∏–π'}]},
    # {'title': '–ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Å–ª–æ–≤–∞ —Ä—ñ–≤–Ω—è B1 —á. 6', 'parts': [{'q-en': 'suspiciousness', 'a-uk': '–ü—ñ–¥–æ–∑—Ä—ñ–ª—ñ—Å—Ç—å'}, {'q-en': '–ê mindfulness', 'a-uk': '–£–≤–∞–∂–Ω—ñ—Å—Ç—å, –º–∏—Å–ª–µ–Ω–Ω—è, —Å–≤—ñ–¥–æ–º—ñ—Å—Ç—å'}, {'q-en': 'kindness', 'a-uk': '–î–æ–±—Ä–æ—Ç–∞'}]},
    # {'title': '–ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Å–ª–æ–≤–∞ —Ä—ñ–≤–Ω—è B1 —á. 7', 'parts': [{'q-en': 'At once', 'a-uk': '–ù–µ–≥–∞–π–Ω–æ'}, {'q-en': 'Private', 'a-uk': '–û—Å–æ–±–∏—Å—Ç–∏–π, –ø—Ä–∏–≤–∞—Ç–Ω–∏–π'}, {'q-en': 'medication', 'a-uk': '–õ—ñ–∫–∏'}]},
    {
        "title": "–ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Å–ª–æ–≤–∞ —Ä—ñ–≤–Ω—è B1 —á. 7",
        "parts": [
            {"q-en": "–ê proficiency", "a-uk": "–ú–∞–π—Å—Ç–µ—Ä–Ω—ñ—Å—Ç—å, —É–º—ñ–Ω–Ω—è, –∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—è"},
            {"q-en": "rivalry", "a-uk": "–°—É–ø–µ—Ä–Ω–∏—Ü—Ç–≤–æ, –ø—Ä–æ—Ç–∏—Å—Ç–æ—è–Ω–Ω—è"},
            {"q-en": "Relentlessly", "a-uk": "–ë–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–æ"},
        ],
    },
    {
        "title": "–ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Å–ª–æ–≤–∞ —Ä—ñ–≤–Ω—è B1 —á. 8",
        "parts": [
            {"q-en": "Moreover", "a-uk": "–ë—ñ–ª—å—à —Ç–æ–≥–æ"},
            {"q-en": "To reserve", "a-uk": "–†–µ–∑–µ—Ä–≤—É–≤–∞—Ç–∏"},
            {"q-en": "Contemporary", "a-uk": "–°—É—á–∞—Å–Ω–∏–π, –∞–∫—Ç—É–∞–ª—å–Ω–∏–π"},
        ],
    },
    {
        "title": "–ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Å–ª–æ–≤–∞ —Ä—ñ–≤–Ω—è B1 —á. 9",
        "parts": [
            {"q-en": "To connect", "a-uk": "–ó'—î–¥–Ω–∞—Ç–∏"},
            {"q-en": "To empower", "a-uk": "–ù–∞–¥—ñ–ª–∏—Ç–∏ –ø–æ–≤–Ω–æ–≤–∞–∂–µ–Ω–Ω—è–º–∏, —Ä–æ–∑—à–∏—Ä—é–≤–∞—Ç–∏"},
            {"q-en": "–ê hospitality", "a-uk": "–ì–æ—Å—Ç–∏–Ω–Ω—ñ—Å—Ç—å, –ø—Ä–∏–≤—ñ—Ç–Ω—ñ—Å—Ç—å"},
        ],
    },
    {
        "title": "–ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Å–ª–æ–≤–∞ —Ä—ñ–≤–Ω—è B1 —á. 10",
        "parts": [
            {"q-en": "–ê bad luck", "a-uk": "–ù–µ–≤–µ–∑—ñ–Ω–Ω—è, –Ω–µ—â–∞—Å—Ç—è"},
            {"q-en": "contradiction", "a-uk": "–ü—Ä–æ—Ç–∏—Ä—ñ—á—á—è"},
            {"q-en": "Ridiculous", "a-uk": "–ë–µ–∑–≥–ª—É–∑–¥–∏–π, —Å–º—ñ—à–Ω–∏–π"},
        ],
    },
    {
        "title": "–ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Å–ª–æ–≤–∞ —Ä—ñ–≤–Ω—è B1 —á. 11",
        "parts": [
            {"q-en": "circumstance", "a-uk": "–û–±—Å—Ç–∞–≤–∏–Ω–∞, –≤–∏–ø–∞–¥–æ–∫, –ø–æ–¥—ñ—è"},
            {"q-en": "To collaborate", "a-uk": "–°–ø—ñ–≤–ø—Ä–∞—Ü—é–≤–∞—Ç–∏"},
            {"q-en": "justice", "a-uk": "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ñ—Å—Ç—å"},
        ],
    },
    {
        "title": "–ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Å–ª–æ–≤–∞ —Ä—ñ–≤–Ω—è B1 —á. 12",
        "parts": [
            {"q-en": "To implement", "a-uk": "–í–ø—Ä–æ–≤–∞–¥–∏—Ç–∏, —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏, –∑–¥—ñ–π—Å–Ω–∏—Ç–∏"},
            {"q-en": "To regard", "a-uk": "–†–æ–∑–≥–ª—è–¥–∞—Ç–∏, –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏, —Å—Ç–∞–≤–∏—Ç–∏—Å—å"},
            {"q-en": "inequality", "a-uk": "–ù–µ—Ä—ñ–≤–Ω—ñ—Å—Ç—å"},
        ],
    },
    {
        "title": "–ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Å–ª–æ–≤–∞ —Ä—ñ–≤–Ω—è B1 —á. 13",
        "parts": [
            {"q-en": "To encourage", "a-uk": "–°—Ç–∏–º—É–ª—é–≤–∞—Ç–∏"},
            {"q-en": "hopelessness", "a-uk": "–ë–µ–∑–Ω–∞–¥—ñ–π–Ω—ñ—Å—Ç—å"},
            {"q-en": "fervor", "a-uk": "–ü–∞–ª–∫—ñ—Å—Ç—å, –∑–∞–ø–∞–ª, –∑–∞–≤–∑—è—Ç—Ç—è"},
        ],
    },
]


async def main():
    # Fetching posts from r/AskReddit
    # headers = { 'user-agent':'py-reddit-scraping:0:1.0 (by u/ur_name)' }
    # posts = requests.get('https://www.reddit.com/r/AskReddit/top.json?t=day&limit=30', headers=headers).json()['data']['children']

    for post in posts:
        try:
            # Avoid getting banned, no NSFW posts
            # if 'nsfw' in post['data']['whitelist_status']:
            #    continue

            # url = post['data']['url']
            # name = url.split('/')[-2]
            name = post["title"]
            print(f"‚è± Processing post: {name}")

            # Make sure we have not already rendered/uploaded post
            if name in [entry.split(".")[0] for entry in os.listdir("render")]:
                print("‚ùå Post already processed!")
                continue

            # Clean 'temporary' files from last video
            for file in os.listdir("output"):
                os.remove(f"output/{file}")

            # Scraping the post, screenshotting, etc
            print("üì∏ Screenshotting post...")
            # data = scrape(url)
            # if not data:
            #    print("‚ùå Failed to screenshot post!")
            #    continue

            # Generate TTS clips for each comment
            print("\nüì¢ Generating voice clips...", end="", flush=True)
            # voice = await tts.get_voice()
            texts = {}
            for i, part in enumerate(post["parts"]):
                print(".", end="", flush=True)
                tts.generate_google(name, "post", "uk")
                for key, text in part.items():
                    q_or_a, language = key.split("-")
                    sound_file_name = f"{i}-{q_or_a}"
                    tts.generate_google(text, sound_file_name, language)
                    texts[sound_file_name] = text

            # Render & Upload
            print("\nüé• Rendering video...")
            if video.render_qna(name, texts, name):
                # Upload video if rendered
                print("üåü Uploading to TikTok...")
                # if upload_to_tiktok(name,data["post"]):
                #    print("‚úÖ Uploaded successfully!")
                # else:
                #    print("‚ùå Failed to upload!")
        except Exception as e:
            if config["debug"]:
                raise e
            pass


if __name__ == "__main__":
    [
        os.mkdir(dir)
        for dir in ["output", "render", "backgrounds"]
        if not os.path.exists(dir)
    ]
    asyncio.run(main())
